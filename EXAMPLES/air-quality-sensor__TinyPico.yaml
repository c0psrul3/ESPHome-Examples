esphome:
  name: tinypico-plant-2
  friendly_name: tinypico-plant-2

esp32:
  board: tinypico
  # framework:
  #   type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret hass_api_key

ota:
  - platform: esphome
    password: !secret esphome_ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: !secret domain
  fast_connect: true
  ap:
    ssid: "Tinypico-Plant-2"
    password: !secret wifi_password

mdns:
  disabled: false

mqtt:
  broker: 192.168.x.xxx
  port: xxxx
  username: xxxx
  password: xxxx
  birth_message:
  will_message:
  on_message:
    - topic: /bedford/ota_mode
      payload: 'ON'
      then:
        - deep_sleep.prevent: deep_sleep_1
    - topic: bedford/sleep_mode
      payload: 'ON'
      then:
        - deep_sleep.enter: deep_sleep_1

# captive_portal:

web_server:
  port: 80

# Deep Sleep Feature. Needs adjustments...
deep_sleep:
  run_duration: 300s
  sleep_duration: 30min

i2c:
  sda: GPIO21
  scl: GPIO22
  # scan: false

substitutions:
  sensorname: sensor-presence
  entitysub: BME680
  domain: !secret domain

light:
  - platform: fastled_spi
    chipset: APA102
    data_pin: GPIO2
    clock_pin: GPIO12
    num_leds: 1
    rgb_order: BRG
    name: "RGB Light"
    # restore_mode: ALWAYS_ON

bme680_bsec:
  address: 0x77 # 0x76 or 0x77
  temperature_offset: 0 # i.e. if temp reads 5 deg high, set this to 5
  iaq_mode: static # static or mobile (on a person or moveable device)
  sample_rate: lp # lp=low power (3 sec) or ulp=ultra low power (5 min)
                  # note you can set on a per-sensor level
  state_save_interval: 6h

sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 30s

  - platform: uptime
    name: "$entitysub Uptime"
    update_interval: 60s

  - platform: internal_temperature
    name: "TinyPico internal temp"

  # Battery Charge
  - platform: adc
    pin: GPIO34
    id: "chgbatt"
    name: "Charge Voltage"
    update_interval: 30s
    device_class: "battery"
    state_class: "measurement"
    entity_category: "diagnostic"
    icon: "mdi:battery-outline"
    # accuracy_decimals: 1
    attenuation: 12dB
    samples: 10
    # filters:
    #   - multiply: 2.0  # The voltage divider requires us to multiply by 2
  
  # Battery Voltage
  - platform: adc
    pin: GPIO35
    id: "vbatt"
    name: "Battery Voltage"
    update_interval: 15s
    # disabled_by_default: false
    device_class: "battery"
    state_class: "measurement"
    entity_category: "diagnostic"
    icon: "mdi:battery-outline"
    attenuation: 12dB
    # raw: true
    accuracy_decimals: 4
    samples: 10 
    filters:
      - multiply: 3.750  # The voltage divider requires us to multiply
    # lambda: |-
      # return ((id(vbatt).state /4.0) * 100.00);
    on_value:
      then:
        - component.update: pbatt
 
  - platform: template
    name: "esp.2.battery_level"
    unit_of_measurement: '%'
    update_interval: 5s
    lambda: |-
      return ((id(vbatt).state /4.0) * 100.00);

  # derive battery percentage 3300mV=0%, 3950mV=100%
  - platform: template
    lambda: |-
      float x = id(vbatt).state;
      if (x < 3300) {
        x = 3300;
      }
      if (x > 3950) {
        x = 3950;
      }
      float y = (x - 3300) / 650 * 100;
      return y;
    name: "Battery Percentage"
    id: "pbatt"
    update_interval: never
    unit_of_measurement: "%"
    device_class: "battery"
    state_class: "measurement"
    icon: "mdi:battery"
    accuracy_decimals: 0

  - platform: bme680_bsec
    temperature:
      name: "$entitysub Temp" # in °C
      id: temperature
      sample_rate: ulp
      filters:
        - median
    humidity:
      name: "$entitysub Rel Humidity" # in %
      id: humidity
      sample_rate: lp
      filters:
        - median
    pressure:
      name: "$entitysub Pressure" # in HPa
      id: pressure
      sample_rate: ulp
      disabled_by_default: true
      filters:
        - median
    gas_resistance:
      name: "$entitysub Gas Resistance" # in Ω
      id: "gas_resistance"
      filters:
        - median
    iaq:
      name: "$entitysub IAQ Level" # numeric of 0, 1, 2, 3
      id: iaq
    co2_equivalent:
      name: "$entitysub CO2" # in ppm
      filters:
        - median
    breath_voc_equivalent:
      name: "$entitysub Breath VOC" # in ppm
      filters:
        - median

  - platform: template
    name: "BME680 Indoor Air Quality"
    id: iaq_gas
    icon: "mdi:gauge"
    # calculation: comp_gas = log(R_gas[ohm]) + 0.04 log(Ohm)/%rh * hum[%rh]
    lambda: |-
      return log(id(gas_resistance).state) + 0.04 *  id(humidity).state;
    state_class: "measurement"

  - platform: absolute_humidity
    name: "$entitysub Abs Humidity"
    temperature: temperature
    humidity: humidity

  - platform: template
    name: "$entitysub Dewpoint"
    icon: 'mdi:thermometer-water'
    update_interval: 15s
    unit_of_measurement: °F
    lambda: |-
      return ((float(id(temperature).state) - ((100.0 - float(id(humidity).state))/5.0)) * 9.0/5.0) + 32.0;

  - platform: template
    name: "$entitysub Sealevel InHg"
    id: sealevel_inhg
    lambda: |-
      const float STANDARD_ALTITUDE = 0.6; // in meters, see note
      return id(pressure).state / powf(1 - ((0.0065 * STANDARD_ALTITUDE) /
        (id(temperature).state + (0.0065 * STANDARD_ALTITUDE) + 273.15)), 5.257) *
        0.02952998057228486; // in inHg
    update_interval: 15s
    unit_of_measurement: 'inHg'
    accuracy_decimals: 2

  - platform: template
    name: "$entitysub Sealevel hPa"
    id: sealevel_hpa
    lambda: |-
      const float STANDARD_ALTITUDE = 0.6; // in meters, see note
      return id(pressure).state / powf(1 - ((0.0065 * STANDARD_ALTITUDE) /
        (id(temperature).state + (0.0065 * STANDARD_ALTITUDE) + 273.15)), 5.257); // in hPa
    update_interval: 15s
    unit_of_measurement: 'hPa'
    accuracy_decimals: 2

  - platform: template
    name: "$entitysub Elevation"
    lambda: |-
      const float STANDARD_SEA_LEVEL_PRESSURE = id(sealevel_hpa).state; //in hPa, see note
      return ((id(temperature).state + 273.15) / 0.0065) *
        (powf((STANDARD_SEA_LEVEL_PRESSURE / id(pressure).state), 0.190234) - 1); // in meter
    update_interval: 15s
    icon: 'mdi:elevation-rise'
    unit_of_measurement: 'm'

  # Example MiCS-4514 Gas Sensor (https://esphome.io/components/sensor/mics_4514.html)
  - platform: mics_4514
    nitrogen_dioxide:
      name: Nitrogen Dioxide
    carbon_monoxide:
      name: Carbon Monoxide
    hydrogen:
      name: Hydrogen
    ethanol:
      name: Ethanol
    methane:
      name: Methane
    ammonia:
      name: Ammonia
    update_interval: 60s

text_sensor:
  - platform: wifi_info
    ip_address:
      name: Network IP
    ssid:
      name: Network SSID
    bssid:
      name: Network BSSID
    mac_address:
      name: TinyPico MAC
  - platform: bme680_bsec
    iaq_accuracy:
      # IAQ accuracy as a text value of Stabilizing, Uncertain, Calibrating, Calibrated
      name: "$entitysub IAQ Accuracy"
  - platform: template
    name: "$entitysub IAQ"
    icon: "mdi:checkbox-marked-circle-outline"
    update_interval: 15s
    lambda: |-
      if ( int(id(iaq).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(iaq).state) >= 51 && int(id(iaq).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(iaq).state) >= 101 && int(id(iaq).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(iaq).state) >= 151 && int(id(iaq).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(iaq).state) >= 201 && int(id(iaq).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(iaq).state) >= 251 && int(id(iaq).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(iaq).state) >= 351) {
        return {"Extremely polluted"};
      }
      else {
        return {"error"};
      }

# output:
#   - platform: gpio
#     pin: GPIO13     # APA102  ## DATA - GPIO2   ## CLK - GPIO2  ## PWR - GPIO13
#     id: rgb_output
#     inverted: false

# display:
#   - platform: ssd1306_i2c
#     model: "SSD1306 128x64"
#     reset_pin: GPIO32
#     address: 0x3C
#     # Display output needs adjustments
#     lambda: |-
#       it.printf(0, 10, id(my_font), "Feuchtigkeit");
#       it.printf(0, 32, id(my_font), "liegt bei:");
#       it.printf(0, 54, id(my_font), "%.1f %%", id(moisture_sensor).state);
      
# font:
#   - file: "arial.ttf"
#     id: my_font
#     size: 20

