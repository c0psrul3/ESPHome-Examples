esphome:
  name: ttgo-tdisplay
  friendly_name: ttgo-tdisplay

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  id: api1
  encryption:
    key: !secret ttgo_tdisplay_api_key

ota:
  - platform: esphome
    password: !secret esphome_ota_password

wifi:
  id: WiFi1
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: !secret domain
  fast_connect: true

# # MQTT setup
# mqtt:
#   broker: ${broker_ip}
#   username: has
#   password: !secret mqtt_pw
#   topic_prefix: !secret air_quality_prefix
#   log_topic: !secret air_quality_log

web_server:
  port: 80

# # Deep Sleep Feature. Needs adjustments...
# deep_sleep:
#   run_duration: 180s
#   sleep_duration: 30min

# [ESPHome EXAMPLE - TTGO T-Display](https://github.com/anton-semeniak/Esphome-TTGO-T-Display-Remote)

# globals:
#   - id: last_remote
#     restore_value: no
#     type: int
#     initial_value: "0"
#   - id: menu_pos
#     restore_value: no
#     type: int
#     initial_value: "0"

# substitutions:
#   key: value

# remote_receiver:
#   pin: 
#     number: GPIO27
#     inverted: True
#   dump: nec

# interval:
#   - interval: $moisture_update_interval
#     then:
#       - output.turn_on: moisture_gen
#       - output.set_level:
#           id: moisture_gen
#           level: 34%
#       - delay: 500ms
#       - component.update: rMoisture
#       - component.update: iMoisture
#       - component.update: aMoisture
#       - output.turn_off: moisture_gen

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO19
i2c:
  sda: GPIO21
  scl: GPIO22
  scan: True

font:
  - file: "gfonts://Roboto"
    id: roboto
    size: 20
  - file: "fonts/slkscr.ttf"
    id: font_slkscr
    size: 24
  - file: "fonts/helvetica.ttf"
    id: helvetica_48
    size: 48
  - file: "fonts/helvetica.ttf"
    id: helvetica_24
    size: 24
  - file: "fonts/helvetica.ttf"
    id: helvetica_12
    size: 12

image:
  - file: "images/LAMP_ON.png"
    id: lamp_on
    type: RGB565
  - file: "images/LAMP_OFF.png"
    id: lamp_off
    type: RGB565
  - file: "images/wifi_24x24.png"
    id: wifi_img
    type: RGB565
  - file: "images/wifi_disconnected_24x24.png"
    id: wifi_offline
    type: RGB565
  - file: "images/ha_logo.png"
    id: ha_logo
    type: RGB565
  - file: "images/ha_esp.png"
    id: ha_esp
    type: RGB565
  - file: "images/esphome_icon.png"
    id: esphome_logo
    type: RGB565

color:
  - id: RED
    red: 100%
    green: 0%
    blue: 0%
  - id: BLUE
    red: 0%
    green: 0%
    blue: 100%
  - id: WHITE
    red: 100%
    green: 100%
    blue: 100%
  - id: GREEN
    red: 0%
    green: 100%
    blue: 0%
  - id: GRAY
    red: 50%
    green: 50%
    blue: 50%
  - id: YELLOW
    red: 100%
    green: 100%
    blue: 0%


# Allow dimmable control of the backlight (pin GPIO4)
output:
  - platform: ledc
    pin:
      number: GPIO4
      allow_other_uses: true
    id: disp_backlight

light:
  - platform: monochromatic
    output: disp_backlight
    name: "Backlight"

time:
  - platform: homeassistant
    id: esptime

sensor:
  # Shelly H&T - Temp & Humidity
  - platform: homeassistant
    id: shellyht_humidity
    entity_id: sensor.shellyplusht_b8d61a8b2864_humidity
    unit_of_measurement: '%'
  - platform: homeassistant
    id: shellyht_temp
    entity_id: sensor.shellyplusht_b8d61a8b2864_temperature
    unit_of_measurement: 'C'

  # Micron - Temp & Humidity
  - platform: homeassistant
    id: micron_humidity
    entity_id: sensor.micron_sensor_relative_humidity_measurement
    unit_of_measurement: '%'
  - platform: homeassistant
    id: micron_temp
    entity_id: sensor.micron_sensor_temperature_measurement
    unit_of_measurement: 'C'

  # TTGO Battery
  - platform: adc
    pin: 34
    attenuation: 11db
    update_interval: 60s
    raw: true
    id: "vbatt"
    name: "Battery Voltage"
    disabled_by_default: true
    device_class: "voltage"
    state_class: "measurement"
    icon: "mdi:battery-outline"
    accuracy_decimals: 2
    entity_category: "diagnostic"
    on_value:
      then:
        - component.update: pbatt

  - platform: template
    name: batterylevel
    id: batterylevel
    unit_of_measurement: '%'
    update_interval: 60s
    lambda: |-
      // I know infering the battery from voltage only is misleading, but I'll take it. Considering linear decay (again, i'll take it), max=2.23, min=1.38
      return ((id(vbatt).state * 118) - 162);

  # derive battery percentage 3300mV=0%, 3950mV=100%
  - platform: template
    lambda: |-
      float x = id(vbatt).state;
      if (x < 3300) {
        x = 3300;
      }
      if (x > 3950) {
        x = 3950;
      }
      float y = (x - 3300) / 650 * 100;
      return y;
    name: "Battery Percentage"
    id: "pbatt"
    update_interval: never
    unit_of_measurement: "%"
    device_class: "battery"
    state_class: "measurement"
    icon: "mdi:battery"
    accuracy_decimals: 0

binary_sensor:
  - platform: status
    name: "Node Status"
    id: system_status
    internal: True
    
  # # T-Display Buttons
  # - platform: gpio
  #   pin:
  #     number: GPIO0
  #     inverted: true
  #     mode:
  #       input: true
  #       pullup: true
  #   name: "T-Display Button Input 0"
  #   id: tdisplay_button_input_0
  #   on_click:
  #     then:
  #       - homeassistant.service:
  #           service: switch.toggle
  #           data:
  #             entity_id: switch.termo
  # - platform: gpio
  #   pin:
  #     number: GPIO35
  #     inverted: true
  #   name: "T-Display Button Input 1"
  #   id: tdisplay_button_input_1
  #   on_click:
  #     then:
  #       - homeassistant.service:
  #           service: switch.toggle
  #           data:
  #             entity_id: switch.tasmota

  # # HOME ASSISTANT LIGHTS/SWITHES
  # - platform: homeassistant
  #   id: library_floor_lamp_plugin
  #   entity_id: light.library_floor_lamp_plugin
  #   internal: true
  #   on_state:
  #     then:
  #       - component.update: st7789vdisplay
  # - platform: homeassistant
  #   id: meter_plus_0c18
  #   entity_id: sensor.meter_plus_0c18
  #   internal: True
  #   on_state:
  #     then:
  #       - component.update: st7789vdisplay
  # - platform: homeassistant
  #   id: kitchen_main_lights
  #   entity_id: light.kitchen_main_lights
  #   internal: true
  #   on_state:
  #     then:
  #       - component.update: st7789vdisplay


# if (id(library_floor_lamp_plugin).state){
#   it.image(0, 0, id(lamp_on));
# }
# else {
#   it.image(0, 0, id(lamp_off));
# }
# if (id(kitchen_main_lights).state){
#   it.image(0, 33, id(lamp_on));
# }
# else {
#   it.image(0, 33, id(lamp_off));
# }

# // Spacer
# it.filled_rectangle (5,205,125,3,0xFFFF);

# // Time
# it.strftime(3, 235, id(font_slkscr), 0xFFFF, TextAlign::BASELINE_LEFT, "%H:%M", id(esptime).now());
# //it.printf (120, 215, id(font_slkscr), 0xFE60,"%i",id(last_remote));

# // Status Icons
# if (id(WiFi1).is_connected ()) {
#   it.image(80, 216, id(wifi_img));
# }
# if (id(api1).is_connected ()) {
#   it.image(110, 216, id(ha_logo));
# }

display:
  - platform: st7789v
    id: st7789vdisplay
    model: TTGO TDisplay 135x240
    # reset_pin: GPIO23
    # dc_pin: GPIO16
    # cs_pin: GPIO5
    # rotation: 90
    rotation: 270
    backlight_pin:
      number: GPIO4
      allow_other_uses: True
    update_interval: 100ms
    lambda: |-
      // [TTGO display pixel coordinates](https://esphome.io/components/display/st7789v.html#id2)
      // TTGO:  H/W: 240/135 , OFFSET: 52/40
      it.rectangle(0,  0, it.get_width(), it.get_height(), id(BLUE));
      it.rectangle(0, 20, it.get_width(), it.get_height(), id(BLUE));   // header bar

      it.strftime((240 / 2), (140 / 3) * 1 + 5, id(helvetica_24), id(GRAY), TextAlign::CENTER, "%Y-%m-%d", id(esptime).now());
      it.strftime((240 / 2), (140 / 3) * 2 + 5, id(helvetica_48), id(GRAY), TextAlign::CENTER, "%H:%M:%S", id(esptime).now());
      it.print(5, 5, id(helvetica_12), id(YELLOW), TextAlign::TOP_LEFT, "ESPHome");

      // Comment out the above lines to see the image without text overlaid
      // it.image(0, 0, id(my_image));

      // if (id(system_status).state) {
      //   it.print(235, 5, id(helvetica_12), id(GREEN), TextAlign::TOP_RIGHT, "Online");
      // }
      // else {
      //   it.print(235, 5, id(helvetica_12), id(RED), TextAlign::TOP_RIGHT, "Offline");
      // }
      if (id(WiFi1).is_connected ()) {
        it.image(200, 5, id(wifi_img));
      }
      else {
        it.image(200, 5, id(wifi_offline));
      }

# it.print(4,  9, id(roboto), GRAY, TextAlign::LEFT, "Shelly HT+:");
# it.print(4, 45, id(roboto), GRAY, TextAlign::LEFT, "Micron:");
# it.printf(120, 9, id(roboto), BLUE, "%s°C", id(shellyht_temp).state);
# it.printf(180, 9, id(roboto), BLUE, "%s", id(shellyht_humidity).state);
# it.printf(120, 45, id(roboto), RED, "%s°C", id(micron_temp).state);
# it.printf(180, 45, id(roboto), YELLOW, "%s", id(micron_humidity).state);


